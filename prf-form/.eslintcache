[{"C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\index.js":"1","C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\reportWebVitals.js":"2","C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\App.js":"3","C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\components\\MyNav.js":"4","C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\components\\PRF.js":"5","C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\testsData.js":"6","C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\helpers\\useForm.js":"7"},{"size":547,"mtime":1608568502152,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":403,"mtime":1608568723648,"results":"11","hashOfConfig":"9"},{"size":1953,"mtime":1608568770517,"results":"12","hashOfConfig":"9"},{"size":7115,"mtime":1608651193035,"results":"13","hashOfConfig":"9"},{"size":9307,"mtime":1608569718484,"results":"14","hashOfConfig":"9"},{"size":345,"mtime":1608572431588,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"p011gq",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\index.js",[],["33","34"],"C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\reportWebVitals.js",[],"C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\App.js",[],"C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\components\\MyNav.js",["35","36"],"import React, { useState } from 'react';\r\nimport { withRouter, Link } from 'react-router-dom'\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    // Nav,\r\n    // NavItem,\r\n    // NavLink,\r\n    // UncontrolledDropdown,\r\n    // DropdownToggle,\r\n    // DropdownMenu,\r\n    // DropdownItem,\r\n    NavbarText\r\n} from 'reactstrap';\r\n\r\nconst MyNav = (props) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const toggle = () => setIsOpen(!isOpen);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar color=\"light\" light expand=\"md\">\r\n                <NavbarBrand href=\"/\">CBTS</NavbarBrand>\r\n                <NavbarToggler onClick={toggle} />\r\n                <Collapse isOpen={isOpen} navbar>\r\n                    {/* <Nav className=\"mr-auto\" navbar>\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>\r\n                                Options\r\n              </DropdownToggle>\r\n                            <DropdownMenu right>\r\n                                <DropdownItem>\r\n                                    Option 1\r\n                </DropdownItem>\r\n                                <DropdownItem>\r\n                                    Option 2\r\n                </DropdownItem>\r\n                                <DropdownItem divider />\r\n                                <DropdownItem>\r\n                                    Reset\r\n                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                    </Nav> */}\r\n\r\n                    {/* <NavbarText ><Link target=\"_blank\" to={\"//cbtseminary.org/password-request-form/\"}>Password Request Form</Link></NavbarText> */}\r\n                    <NavbarText >Password Request Form</NavbarText>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\n// export default withRouter(MyNav);\r\nexport default MyNav","C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\components\\PRF.js",["37"],"import React, { useEffect, useState } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport useForm from \"../helpers/useForm\"\r\nimport { testsData } from '../testsData'\r\nconst PRF = () => {\r\n    const [titles, setTitles] = useState([])\r\n    const [availTest, setAvailTest] = useState([])\r\n    const [classCode, setClassCode] = useState('')\r\n    const [quizCode, setQuizCode] = useState('')\r\n\r\n    useEffect(() => {\r\n        let tList = (testsData.map(x => x.courseName))\r\n        setTitles([...new Set(tList)])\r\n    }, [])\r\n    // User Inputs\r\n    const [user, handleChange] = useForm({\r\n        fname: '',\r\n        lname: '',\r\n        email: '',\r\n        pname: '',\r\n        pemail: '',\r\n    });\r\n    // Dropdowns\r\n    const classCodeSelectChanged = (e) => {\r\n        let selectedCode = e.target.value\r\n        setClassCode(selectedCode)\r\n        let quizzes = testsData.filter(x => x.courseName === selectedCode)\r\n        setAvailTest(quizzes)\r\n    }\r\n    const selectedTest = (e) => {\r\n        let selectedCode = e.target.value\r\n        setQuizCode(selectedCode)\r\n    }\r\n    // \"https://cors-anywhere.herokuapp.com/http://ec2-54-205-248-111.compute-1.amazonaws.com:5000/api/courses/prf\"\r\n    function postForm(obj) {\r\n        obj = JSON.stringify(obj);\r\n        fetch(\"http://ec2-54-205-248-111.compute-1.amazonaws.com:5000/api/courses/prf\", {\r\n            method: \"POST\",\r\n            mode: 'cors',\r\n            body: obj,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }).then((x) => {\r\n            if (x.status == 200) {\r\n                Swal.fire(\r\n                    \"Form submitted!\",\r\n                    \"If your proctor does not receive the password within one minute, please resubmit this form or email: course.info@cbtseminary.org\",\r\n                    \"success\"\r\n                ).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        window.location.reload();\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: 'Something went wrong!',\r\n                    footer: 'Email your request to course.info@cbtseminary.org'\r\n                })\r\n            }\r\n        });\r\n    }\r\n    // Form Submission\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        let formData = {\r\n            studentFirst: user.fname,\r\n            studentLast: user.lname,\r\n            studentEmail: user.email,\r\n            proctorName: user.pname,\r\n            proctorEmail: user.pemail,\r\n            classCodeSelected: classCode,\r\n            testNumberSelected: quizCode\r\n        }\r\n        if (formData.studentEmail !== formData.proctorEmail) {\r\n            postForm(formData);\r\n            // Swal.fire(\r\n            //     \"Form submitted!\",\r\n            //     \"If your proctor does not receive the password within one minute, please resubmit this form or email: course.info@cbtseminary.org\",\r\n            //     \"success\"\r\n            // ).then((result) => {\r\n            //     if (result.isConfirmed) {\r\n            //         window.location.reload();\r\n            //     }\r\n            // })\r\n            // setTimeout(function () {\r\n            //     window.location.reload();\r\n            //     return\r\n            // }, 10000);\r\n\r\n        } else {\r\n            alert(\"Invalid Proctor Email\");\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2 style={{ color: '#0d6cbf' }}>Password Request Form</h2>\r\n            <div className=\"form-container\">\r\n\r\n                <form id=\"mainForm\">\r\n                    <div className=\"form-group w-100\">\r\n                        <label htmlFor=\"studentFirst\">First Name</label>\r\n                        <input required type=\"text\" className=\"form-control\" id=\"studentFirst\" name=\"fname\" value={user.fname} onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"form-group w-100\">\r\n                        <label htmlFor=\"studentLast\">Last Name</label>\r\n                        <input required type=\"text\" className=\"form-control\" id=\"studentLast\" name=\"lname\" value={user.lname} onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"form-group w-100\">\r\n                        <label htmlFor=\"studentEmail\">Student Email</label>\r\n                        <input required type=\"email\" className=\"form-control\" id=\"studentEmail\" name=\"email\" value={user.email} onChange={handleChange} />\r\n                        <small>student@example.com</small>\r\n                    </div>\r\n                    <div className=\"form-group w-100\">\r\n                        <label htmlFor=\"proctorName\">Proctor Name</label>\r\n                        <input required type=\"text\" className=\"form-control\" id=\"proctorName\" name=\"pname\" value={user.pname} onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"form-group w-100\">\r\n                        <label htmlFor=\"proctorEmail\">Proctor Email</label>\r\n                        <input required type=\"email\" className=\"form-control\" id=\"proctorEmail\" name=\"pemail\" value={user.pemail} onChange={handleChange} />\r\n                        <small>proctor@example.com</small>\r\n                    </div>\r\n                    <div className=\"form-group w-100\">\r\n                        <label htmlFor=\"classCode\">Class Code &amp; Title\r\n              <span className=\"form-required\">\r\n                                *\r\n              </span></label>\r\n                        <select required className=\"form-control\" id=\"classCode\" value={classCode} onChange={(e) => classCodeSelectChanged(e)}>\r\n                            <option value=\"none\" defaultValue=\"\" disabled=\"\" hidden=\"\">Select Class Code</option>\r\n                            {titles.map((x, idx) => (\r\n                                <option key={idx} value={x}>{x}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"form-group w-100\">\r\n                        <label htmlFor=\"testNumber\">Quiz/Test number\r\n              <span className=\"form-required\">\r\n                                *\r\n              </span></label>\r\n                        <select required className=\"form-control\" id=\"testNumber\" value={quizCode} onChange={(e) => selectedTest(e)}>\r\n                            <option value=\"none\" defaultValue=\"\" disabled=\"\" hidden=\"\">Select Quiz/Test</option>\r\n                            {availTest.map((x, idx) => (\r\n                                <option key={idx} value={x.testName}>{x.testName}</option>\r\n                            ))}\r\n\r\n                        </select>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn  btn-sm btn-block w-100\" onClick={e => submitForm(e)}>\r\n                        Submit\r\n          </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default PRF","C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\testsData.js",[],"C:\\Users\\Roberto\\Desktop\\dev\\prf\\prf-form-server\\prf-form\\src\\helpers\\useForm.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":2,"column":10,"nodeType":"44","messageId":"45","endLine":2,"endColumn":20},{"ruleId":"42","severity":1,"message":"46","line":2,"column":22,"nodeType":"44","messageId":"45","endLine":2,"endColumn":26},{"ruleId":"47","severity":1,"message":"48","line":45,"column":26,"nodeType":"49","messageId":"50","endLine":45,"endColumn":28},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]